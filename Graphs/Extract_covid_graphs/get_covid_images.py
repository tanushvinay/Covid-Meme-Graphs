# -*- coding: utf-8 -*-
"""covid_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtM8bmNH-gaVEP9zEYEXwZ0_dyqpF1HS
"""

import PIL
from PIL import Image
import tensorflow as tf
from torchvision import transforms
from torchvision import models
import torch
import torch.autograd as Variable
import torch.nn as nn
import torch.nn.functional as F
from torch.optim import lr_scheduler
from torch import optim
import numpy as np
import matplotlib.pyplot as plt
from glob import glob
import os
import pandas as pd
from pandas import ExcelFile
import requests
from io import BytesIO
from tqdm import tqdm
from glob import glob

## CNN class
class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.ConvLayer1 = nn.Sequential(
            nn.Conv2d(3, 8, 3), # inp (3, 512, 512)
            nn.Conv2d(8, 16, 3),
            nn.MaxPool2d(2),
            nn.ReLU() # op (16, 256, 256)
        )
        self.ConvLayer2 = nn.Sequential(
            nn.Conv2d(16, 32, 5), # inp (16, 256, 256)
            nn.Conv2d(32, 32, 3),
            nn.MaxPool2d(4),
            nn.ReLU() # op (32, 64, 64)
        )
        self.ConvLayer3 = nn.Sequential(
            nn.Conv2d(32, 64, 3), # inp (32, 64, 64)
            nn.Conv2d(64, 64, 5),
            nn.MaxPool2d(2),
            nn.ReLU() # op (64, 32, 32)
        )
        self.ConvLayer4 = nn.Sequential(
            nn.Conv2d(64, 128, 5), # inp (64, 32, 32)
            nn.Conv2d(128, 128, 3),
            nn.MaxPool2d(2),
            nn.ReLU() # op (128, 16, 16)
        )
        self.Lin1 = nn.Linear(15488, 1500)
        self.Lin2 = nn.Linear(1500, 150)
        self.Lin3 = nn.Linear(150, 4)
        
        
    def forward(self, x):
        x = self.ConvLayer1(x)
        x = self.ConvLayer2(x)
        x = self.ConvLayer3(x)
        x = self.ConvLayer4(x)
        x = x.view(x.size(0), -1)
        x = self.Lin1(x)
        x = self.Lin2(x)
        x = self.Lin3(x)
       
        
        return F.log_softmax(x, dim = 1)

def extract_meaningful_tweets(dataframe):
    df = dataframe.copy()
    df.columns = df.iloc[0]
    df = df[1:]
    graph_list = []
    for index,row in tqdm(df.iterrows()):
        if isinstance(row['Tweet'], str) and isinstance(row['Media in Tweet'],str):
            try:
                matches = ["graph", "graphic","chart", "diagram", 
                            "venn", "pie", "historgram", 
                            "visualization", "visualisation","graphical", 
                           "representation", "statistc",  "data", "map",
                            "figure", "axis", "axes", "plot", "cartograph", "analysis"]
                if any(x in str(row['Tweet']).lower() for x in matches):
                    graph_list.append(1)
                else: graph_list.append(0)
            except Exception as e:
                print(e)
        else:
            graph_list.append(0)
    df['text_analysis'] = graph_list
    #df = df.drop(list(df.columns[np.r_[2:14,46:54]]), axis=1)
    for index, row in df.iterrows():
        if int(row['text_analysis']) == 0:
            df.drop(index, inplace=True)
    df = df.drop(['text_analysis'], axis=1)
    return df

def check_cuda():
  _cuda = False
  if torch.cuda.is_available():
    _cuda = True
  return _cuda

def test_img(model, input):
  try:
    response = requests.get(input)
    img = Image.open(BytesIO(response.content)).convert('RGB')
    simple_transform = transforms.Compose([transforms.Resize((512,512)),
                              transforms.ToTensor(),
                              transforms.Normalize([0.458, 0.456, 0.406],
                                                    [0.229, 0.224, 0.225])])
    inp = simple_transform(img)[None, ...]
    inp = inp.cuda()
    output = model(inp)

    indices, value = torch.max(output.data, 1)
    out = [output, indices, value]
  except Exception as e:
    out = None 
  return out

def process_file(file_df, model, curr_dir):
  classes = ['Bar', 'Bubble', 'Line', 'Map']
  for index, row in tqdm(file_df.iterrows()):
    output = test_img(model, row['Media in Tweet'])
    if output == None: continue
    class_prob = output[1].detach().cpu().numpy()
    pred = output[2].detach().cpu().numpy()
    prediction = classes[pred[0]]
    if class_prob < -0.05:
      continue
    response = requests.get(row['Media in Tweet'])
    filename = str(row['Vertex 1']) + '#' + str(row['Imported ID']) + '#' + str(prediction)
    img = Image.open(BytesIO(response.content)).convert('RGB').save(str(curr_dir) + '/' + filename + '.jpeg')
  return

files = glob('xlsx/*.xlsx')
print(files)
model = torch.load('graphs_1200')#,map_location='cpu')
is_cuda = False#check_cuda()
#print(is_cuda)
if is_cuda:
  model.cuda()
for file in tqdm(files):
  curr_dir = 'graphs/' + str(file[5:].split('.')[0])
  os.mkdir(curr_dir)
  try:
    file_df = pd.read_excel(file)
    file_df = extract_meaningful_tweets(file_df)
    process_file(file_df, model, curr_dir)
  except Exception as e:
    print(e)

